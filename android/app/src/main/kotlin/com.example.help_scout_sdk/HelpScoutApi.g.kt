// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class HelpScoutApiBeaconRoute(val raw: Int) {
  HOME(0),
  ASK(1),
  ASK_MESSAGE(2),
  ASK_CHAT(3),
  ANSWERS(4),
  PREVIOUS_MESSAGES(5);

  companion object {
    fun ofRaw(raw: Int): HelpScoutApiBeaconRoute? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class HelpScoutApiBeaconFocusMode(val raw: Int) {
  NEUTRAL(0),
  SELF_SERVICE(1),
  ASK_FIRST(2);

  companion object {
    fun ofRaw(raw: Int): HelpScoutApiBeaconFocusMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HelpScoutApiUser (
  val email: String? = null,
  val name: String? = null,
  val company: String? = null,
  val jobTitle: String? = null,
  val avatar: String? = null,
  val attributes: Map<String?, String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HelpScoutApiUser {
      val email = list[0] as String?
      val name = list[1] as String?
      val company = list[2] as String?
      val jobTitle = list[3] as String?
      val avatar = list[4] as String?
      val attributes = list[5] as Map<String?, String?>?
      return HelpScoutApiUser(email, name, company, jobTitle, avatar, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      email,
      name,
      company,
      jobTitle,
      avatar,
      attributes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HelpScoutApiFormPrefill (
  val email: String? = null,
  val name: String? = null,
  val subject: String? = null,
  val text: String? = null,
  val customFields: Map<Long?, String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HelpScoutApiFormPrefill {
      val email = list[0] as String?
      val name = list[1] as String?
      val subject = list[2] as String?
      val text = list[3] as String?
      val customFields = list[4] as Map<Long?, String?>?
      return HelpScoutApiFormPrefill(email, name, subject, text, customFields)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      email,
      name,
      subject,
      text,
      customFields,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HelpScoutApiColor (
  val hexCode: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HelpScoutApiColor {
      val hexCode = list[0] as String
      return HelpScoutApiColor(hexCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hexCode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HelpScoutApiMessagingSettings (
  val contactFormCustomFieldsEnabled: Boolean? = null,
  val contactFormShowNameField: Boolean? = null,
  val contactFormShowSubjectField: Boolean? = null,
  val contactFormAllowAttachments: Boolean? = null,
  val showPrefilledCustomFields: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HelpScoutApiMessagingSettings {
      val contactFormCustomFieldsEnabled = list[0] as Boolean?
      val contactFormShowNameField = list[1] as Boolean?
      val contactFormShowSubjectField = list[2] as Boolean?
      val contactFormAllowAttachments = list[3] as Boolean?
      val showPrefilledCustomFields = list[4] as Boolean?
      return HelpScoutApiMessagingSettings(contactFormCustomFieldsEnabled, contactFormShowNameField, contactFormShowSubjectField, contactFormAllowAttachments, showPrefilledCustomFields)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      contactFormCustomFieldsEnabled,
      contactFormShowNameField,
      contactFormShowSubjectField,
      contactFormAllowAttachments,
      showPrefilledCustomFields,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HelpScoutApiBeaconSettings (
  val beaconId: String,
  val messagingEnabled: Boolean? = null,
  val focusModeOverride: HelpScoutApiBeaconFocusMode? = null,
  val enablePreviousMessages: Boolean? = null,
  val docsEnabled: Boolean? = null,
  val chatEnabled: Boolean? = null,
  val beaconTitle: String? = null,
  val useNavigationBarAppearance: Boolean? = null,
  val color: HelpScoutApiColor? = null,
  val tintColorOverride: HelpScoutApiColor? = null,
  val useLocalTranslationOverrides: Boolean? = null,
  val messagingSettings: HelpScoutApiMessagingSettings? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): HelpScoutApiBeaconSettings {
      val beaconId = list[0] as String
      val messagingEnabled = list[1] as Boolean?
      val focusModeOverride: HelpScoutApiBeaconFocusMode? = (list[2] as Int?)?.let {
        HelpScoutApiBeaconFocusMode.ofRaw(it)
      }
      val enablePreviousMessages = list[3] as Boolean?
      val docsEnabled = list[4] as Boolean?
      val chatEnabled = list[5] as Boolean?
      val beaconTitle = list[6] as String?
      val useNavigationBarAppearance = list[7] as Boolean?
      val color: HelpScoutApiColor? = (list[8] as List<Any?>?)?.let {
        HelpScoutApiColor.fromList(it)
      }
      val tintColorOverride: HelpScoutApiColor? = (list[9] as List<Any?>?)?.let {
        HelpScoutApiColor.fromList(it)
      }
      val useLocalTranslationOverrides = list[10] as Boolean?
      val messagingSettings: HelpScoutApiMessagingSettings? = (list[11] as List<Any?>?)?.let {
        HelpScoutApiMessagingSettings.fromList(it)
      }
      return HelpScoutApiBeaconSettings(beaconId, messagingEnabled, focusModeOverride, enablePreviousMessages, docsEnabled, chatEnabled, beaconTitle, useNavigationBarAppearance, color, tintColorOverride, useLocalTranslationOverrides, messagingSettings)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      beaconId,
      messagingEnabled,
      focusModeOverride?.raw,
      enablePreviousMessages,
      docsEnabled,
      chatEnabled,
      beaconTitle,
      useNavigationBarAppearance,
      color?.toList(),
      tintColorOverride?.toList(),
      useLocalTranslationOverrides,
      messagingSettings?.toList(),
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object HelpScoutApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HelpScoutApiBeaconSettings.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HelpScoutApiColor.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HelpScoutApiFormPrefill.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HelpScoutApiMessagingSettings.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HelpScoutApiUser.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is HelpScoutApiBeaconSettings -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is HelpScoutApiColor -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is HelpScoutApiFormPrefill -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is HelpScoutApiMessagingSettings -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is HelpScoutApiUser -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface HelpScoutApi {
  fun openBeacon(beaconSettings: HelpScoutApiBeaconSettings)
  fun dismissBeacon()
  fun identify(user: HelpScoutApiUser)
  fun setSessionAttributes(attributes: Map<String?, String?>)
  fun prefillForm(beaconId: String, prefillData: HelpScoutApiFormPrefill)
  fun resetAllFormPrefills()
  fun navigate(settings: HelpScoutApiBeaconSettings, route: HelpScoutApiBeaconRoute)
  fun search(settings: HelpScoutApiBeaconSettings, query: String)
  fun openArticle(settings: HelpScoutApiBeaconSettings, articleId: String)
  fun logout()
  fun reset()

  companion object {
    /** The codec used by HelpScoutApi. */
    val codec: MessageCodec<Any?> by lazy {
      HelpScoutApiCodec
    }
    /** Sets up an instance of `HelpScoutApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: HelpScoutApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.openBeacon", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val beaconSettingsArg = args[0] as HelpScoutApiBeaconSettings
            var wrapped: List<Any?>
            try {
              api.openBeacon(beaconSettingsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.dismissBeacon", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.dismissBeacon()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.identify", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as HelpScoutApiUser
            var wrapped: List<Any?>
            try {
              api.identify(userArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.setSessionAttributes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val attributesArg = args[0] as Map<String?, String?>
            var wrapped: List<Any?>
            try {
              api.setSessionAttributes(attributesArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.prefillForm", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val beaconIdArg = args[0] as String
            val prefillDataArg = args[1] as HelpScoutApiFormPrefill
            var wrapped: List<Any?>
            try {
              api.prefillForm(beaconIdArg, prefillDataArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.resetAllFormPrefills", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.resetAllFormPrefills()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.navigate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val settingsArg = args[0] as HelpScoutApiBeaconSettings
            val routeArg = HelpScoutApiBeaconRoute.ofRaw(args[1] as Int)!!
            var wrapped: List<Any?>
            try {
              api.navigate(settingsArg, routeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.search", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val settingsArg = args[0] as HelpScoutApiBeaconSettings
            val queryArg = args[1] as String
            var wrapped: List<Any?>
            try {
              api.search(settingsArg, queryArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.openArticle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val settingsArg = args[0] as HelpScoutApiBeaconSettings
            val articleIdArg = args[1] as String
            var wrapped: List<Any?>
            try {
              api.openArticle(settingsArg, articleIdArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.logout", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.logout()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.reset", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.reset()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class HelpScoutCallbackApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by HelpScoutCallbackApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onBeaconInitialOpen(beaconIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialOpen"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(beaconIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onBeaconOpen(beaconIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconOpen"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(beaconIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onBeaconInitialClose(beaconIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialClose"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(beaconIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onBeaconClose(beaconIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconClose"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(beaconIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
