// Autogenerated from Pigeon (v17.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum HelpScoutApiBeaconRoute {
  home,
  ask,
  askMessage,
  askChat,
  answers,
  previousMessages,
}

enum HelpScoutApiBeaconFocusMode {
  neutral,
  selfService,
  askFirst,
}

class HelpScoutApiUser {
  HelpScoutApiUser({
    this.email,
    this.name,
    this.company,
    this.jobTitle,
    this.avatar,
    this.attributes,
  });

  String? email;

  String? name;

  String? company;

  String? jobTitle;

  String? avatar;

  Map<String?, String?>? attributes;

  Object encode() {
    return <Object?>[
      email,
      name,
      company,
      jobTitle,
      avatar,
      attributes,
    ];
  }

  static HelpScoutApiUser decode(Object result) {
    result as List<Object?>;
    return HelpScoutApiUser(
      email: result[0] as String?,
      name: result[1] as String?,
      company: result[2] as String?,
      jobTitle: result[3] as String?,
      avatar: result[4] as String?,
      attributes: (result[5] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class HelpScoutApiFormPrefill {
  HelpScoutApiFormPrefill({
    this.email,
    this.name,
    this.subject,
    this.text,
    this.customFields,
  });

  String? email;

  String? name;

  String? subject;

  String? text;

  Map<int?, String?>? customFields;

  Object encode() {
    return <Object?>[
      email,
      name,
      subject,
      text,
      customFields,
    ];
  }

  static HelpScoutApiFormPrefill decode(Object result) {
    result as List<Object?>;
    return HelpScoutApiFormPrefill(
      email: result[0] as String?,
      name: result[1] as String?,
      subject: result[2] as String?,
      text: result[3] as String?,
      customFields: (result[4] as Map<Object?, Object?>?)?.cast<int?, String?>(),
    );
  }
}

class HelpScoutApiColor {
  HelpScoutApiColor({
    required this.hexCode,
  });

  String hexCode;

  Object encode() {
    return <Object?>[
      hexCode,
    ];
  }

  static HelpScoutApiColor decode(Object result) {
    result as List<Object?>;
    return HelpScoutApiColor(
      hexCode: result[0]! as String,
    );
  }
}

class HelpScoutApiMessagingSettings {
  HelpScoutApiMessagingSettings({
    this.contactFormCustomFieldsEnabled,
    this.contactFormShowNameField,
    this.contactFormShowSubjectField,
    this.contactFormAllowAttachments,
    this.showPrefilledCustomFields,
  });

  bool? contactFormCustomFieldsEnabled;

  bool? contactFormShowNameField;

  bool? contactFormShowSubjectField;

  bool? contactFormAllowAttachments;

  bool? showPrefilledCustomFields;

  Object encode() {
    return <Object?>[
      contactFormCustomFieldsEnabled,
      contactFormShowNameField,
      contactFormShowSubjectField,
      contactFormAllowAttachments,
      showPrefilledCustomFields,
    ];
  }

  static HelpScoutApiMessagingSettings decode(Object result) {
    result as List<Object?>;
    return HelpScoutApiMessagingSettings(
      contactFormCustomFieldsEnabled: result[0] as bool?,
      contactFormShowNameField: result[1] as bool?,
      contactFormShowSubjectField: result[2] as bool?,
      contactFormAllowAttachments: result[3] as bool?,
      showPrefilledCustomFields: result[4] as bool?,
    );
  }
}

class HelpScoutApiBeaconSettings {
  HelpScoutApiBeaconSettings({
    required this.beaconId,
    this.messagingEnabled,
    this.focusModeOverride,
    this.enablePreviousMessages,
    this.docsEnabled,
    this.chatEnabled,
    this.beaconTitle,
    this.useNavigationBarAppearance,
    this.color,
    this.tintColorOverride,
    this.useLocalTranslationOverrides,
    this.messagingSettings,
  });

  String beaconId;

  bool? messagingEnabled;

  HelpScoutApiBeaconFocusMode? focusModeOverride;

  bool? enablePreviousMessages;

  bool? docsEnabled;

  bool? chatEnabled;

  String? beaconTitle;

  bool? useNavigationBarAppearance;

  HelpScoutApiColor? color;

  HelpScoutApiColor? tintColorOverride;

  bool? useLocalTranslationOverrides;

  HelpScoutApiMessagingSettings? messagingSettings;

  Object encode() {
    return <Object?>[
      beaconId,
      messagingEnabled,
      focusModeOverride?.index,
      enablePreviousMessages,
      docsEnabled,
      chatEnabled,
      beaconTitle,
      useNavigationBarAppearance,
      color?.encode(),
      tintColorOverride?.encode(),
      useLocalTranslationOverrides,
      messagingSettings?.encode(),
    ];
  }

  static HelpScoutApiBeaconSettings decode(Object result) {
    result as List<Object?>;
    return HelpScoutApiBeaconSettings(
      beaconId: result[0]! as String,
      messagingEnabled: result[1] as bool?,
      focusModeOverride: result[2] != null
          ? HelpScoutApiBeaconFocusMode.values[result[2]! as int]
          : null,
      enablePreviousMessages: result[3] as bool?,
      docsEnabled: result[4] as bool?,
      chatEnabled: result[5] as bool?,
      beaconTitle: result[6] as String?,
      useNavigationBarAppearance: result[7] as bool?,
      color: result[8] != null
          ? HelpScoutApiColor.decode(result[8]! as List<Object?>)
          : null,
      tintColorOverride: result[9] != null
          ? HelpScoutApiColor.decode(result[9]! as List<Object?>)
          : null,
      useLocalTranslationOverrides: result[10] as bool?,
      messagingSettings: result[11] != null
          ? HelpScoutApiMessagingSettings.decode(result[11]! as List<Object?>)
          : null,
    );
  }
}

class _HelpScoutApiCodec extends StandardMessageCodec {
  const _HelpScoutApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HelpScoutApiBeaconSettings) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is HelpScoutApiColor) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is HelpScoutApiFormPrefill) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is HelpScoutApiMessagingSettings) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is HelpScoutApiUser) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return HelpScoutApiBeaconSettings.decode(readValue(buffer)!);
      case 129: 
        return HelpScoutApiColor.decode(readValue(buffer)!);
      case 130: 
        return HelpScoutApiFormPrefill.decode(readValue(buffer)!);
      case 131: 
        return HelpScoutApiMessagingSettings.decode(readValue(buffer)!);
      case 132: 
        return HelpScoutApiUser.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HelpScoutApi {
  /// Constructor for [HelpScoutApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HelpScoutApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _HelpScoutApiCodec();

  Future<void> openBeacon(HelpScoutApiBeaconSettings beaconSettings) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.openBeacon';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[beaconSettings]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dismissBeacon() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.dismissBeacon';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> identify(HelpScoutApiUser user) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.identify';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[user]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setSessionAttributes(Map<String?, String?> attributes) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.setSessionAttributes';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[attributes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> prefillForm(String beaconId, HelpScoutApiFormPrefill prefillData) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.prefillForm';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[beaconId, prefillData]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> resetAllFormPrefills() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.resetAllFormPrefills';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> navigate(HelpScoutApiBeaconSettings settings, HelpScoutApiBeaconRoute route) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.navigate';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[settings, route.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> search(HelpScoutApiBeaconSettings settings, String query) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.search';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[settings, query]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> openArticle(HelpScoutApiBeaconSettings settings, String articleId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.openArticle';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[settings, articleId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logout() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.logout';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reset() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.help_scout_sdk.HelpScoutApi.reset';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class HelpScoutCallbackApi {
  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  void onBeaconInitialOpen(String beaconId);

  void onBeaconOpen(String beaconId);

  void onBeaconInitialClose(String beaconId);

  void onBeaconClose(String beaconId);

  static void setup(HelpScoutCallbackApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialOpen', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialOpen was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_beaconId = (args[0] as String?);
          assert(arg_beaconId != null,
              'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialOpen was null, expected non-null String.');
          try {
            api.onBeaconInitialOpen(arg_beaconId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconOpen', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconOpen was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_beaconId = (args[0] as String?);
          assert(arg_beaconId != null,
              'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconOpen was null, expected non-null String.');
          try {
            api.onBeaconOpen(arg_beaconId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialClose', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialClose was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_beaconId = (args[0] as String?);
          assert(arg_beaconId != null,
              'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconInitialClose was null, expected non-null String.');
          try {
            api.onBeaconInitialClose(arg_beaconId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconClose', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconClose was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_beaconId = (args[0] as String?);
          assert(arg_beaconId != null,
              'Argument for dev.flutter.pigeon.help_scout_sdk.HelpScoutCallbackApi.onBeaconClose was null, expected non-null String.');
          try {
            api.onBeaconClose(arg_beaconId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
